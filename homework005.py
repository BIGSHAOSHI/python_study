import math
import random

def data_norm(x0):
    x_max = max(x0)
    x_min = min(x0)
    for d in x0:
        x.append((x_max - d)/(x_max - x_min))
    return x

x0=[]
y0=[]
datatest=[]
x=[]
y=[]
data=[[19.83, 20.92], [19.5, 19.44], [15.63, 8.84], [20.85, 20.34], [4.46, 17.9], [6.05, 17.94], [20.02, 18.42], [5.23, 18.82], [3.92, 17.17], [21.27, 21.27], [20.16, 20.96], [3.55, 17.13], [3.62, 18.78], [14.5, 9.01], [22.04, 19.31], [20.46, 19.65], [4.68, 19.08], [4.5, 16.72], [14.38, 12.12], [18.43, 19.84], [4.53, 16.48], [15.72, 11.27], [5.35, 18.18], [6.29, 18.01], [13.46, 9.91], [15.07, 9.99], [5.3, 18.15], [6.0, 16.64], [13.68, 11.29], [4.86, 18.25], [15.41, 10.81], [15.26, 9.49], [3.84, 20.32], [4.08, 18.6], [19.25, 19.56], [20.19, 19.23], [19.11, 21.81], [20.48, 19.64], [16.13, 10.28], [15.86, 9.94], [15.44, 10.24], [18.96, 17.4], [6.03, 18.54], [15.02, 9.94], [14.19, 9.4], [20.84, 19.89], [16.2, 9.56], [19.86, 19.33], [4.66, 17.66], [5.81, 19.09], [4.57, 18.24], [19.29, 19.96], [3.2, 17.89], [4.2, 16.79], [20.06, 21.09], [20.61, 19.83], [2.97, 18.47], [21.25, 18.89], [4.5, 17.95], [16.05, 10.75], [14.57, 8.38], [14.15, 9.89], [4.83, 16.76], [12.66, 9.88], [18.98, 22.26], [14.69, 9.1], [19.28, 21.2], [5.74, 17.33], [19.67, 19.09], [17.47, 9.24], [15.1, 10.96], [19.57, 19.3], [20.32, 21.01], [19.13, 20.89], [5.74, 18.15], [6.94, 17.69], [6.77, 17.38], [14.29,
10.32], [6.46, 18.74], [18.31, 20.23], [4.55, 18.63], [15.6, 12.97], [5.99, 16.9], [4.03, 18.73], [19.92, 19.0], [19.67, 19.01], [19.59, 19.92], [20.71, 19.5], [21.09, 20.5], [20.48, 18.23], [19.69, 20.59], [19.43, 21.22], [14.68, 10.42], [14.72, 11.3], [14.24, 8.82], [6.21, 19.42], [4.33, 18.51], [19.25, 19.43], [4.77, 18.9], [4.69, 17.6], [21.15, 19.87], [20.05, 18.45], [5.34, 17.59], [8.34, 17.92], [19.81, 20.9], [20.76, 19.58], [16.97, 13.21], [4.37, 15.44], [15.48, 9.49], [5.43, 18.7], [4.64, 17.68], [15.53, 12.55], [6.85, 16.56], [14.47, 11.25], [4.94, 18.25], [15.27, 9.74], [14.65, 12.12], [3.94, 19.34], [20.08, 18.94], [16.9, 10.65], [4.43, 18.5], [4.13, 17.77], [20.11, 22.14], [14.98, 9.58], [17.45, 9.7], [15.05, 9.72], [19.95, 19.22], [14.59, 10.2], [18.33, 17.71], [15.4, 9.55], [13.89, 11.39], [21.16, 22.19], [14.7, 8.64], [4.03, 18.76], [16.44, 10.57], [4.41, 17.82], [16.44, 20.83], [15.73, 9.95], [15.29, 7.1], [4.9, 17.8], [16.13, 9.82], [13.56, 10.85], [5.26, 16.26], [14.85, 9.35], [14.91, 10.06], [15.57, 9.99], [6.47, 19.14], [20.14, 20.33], [6.14, 17.45], [14.02, 9.64], [4.52, 19.68], [4.31, 17.75], [19.23, 20.95], [16.56, 9.49], [19.0, 19.98], [5.24, 17.5], [19.54, 19.2], [5.22, 18.45], [15.9, 10.52], [19.53, 19.7], [20.62, 20.94], [21.44, 20.84], [15.89, 10.17], [5.39, 17.12], [14.61, 10.79], [20.32, 18.35], [14.12, 8.11], [13.85, 10.68], [13.11, 9.87], [6.51, 16.6], [3.93, 18.41], [14.44, 10.58], [18.7, 20.87], [14.08, 9.12], [13.6, 12.39], [4.92, 19.01], [20.54, 19.46], [19.78, 18.5], [17.97, 21.46], [20.63, 20.0], [19.57, 18.79], [4.32, 17.18], [19.65, 20.84], [14.28, 11.24], [5.26, 18.65], [20.27, 19.82], [17.41, 20.98], [20.15, 22.26], [18.56, 20.1], [15.35, 12.0], [14.75, 10.63], [13.46, 10.6], [15.27, 10.19], [18.77, 19.15], [14.26, 11.72], [16.05, 8.87], [15.35, 10.24], [21.16, 18.88], [20.01, 20.1], [19.81, 19.93], [5.8, 16.73], [4.8, 18.9], [6.02, 18.52], [4.58, 17.9], [4.12, 18.09], [21.45, 20.13], [19.9, 20.22], [19.77, 20.57], [14.23, 9.59], [19.11, 19.83], [14.36, 8.8], [3.34, 18.4], [4.9, 17.15], [6.24, 18.59], [20.08, 19.68], [6.29, 17.45], [5.74, 17.19], [15.68, 9.57], [4.79, 20.11], [20.47, 19.98], [6.04, 17.69], [14.93, 8.86], [6.48, 18.04], [13.22, 9.5], [15.62, 8.56], [19.06, 18.71], [15.72, 8.89], [15.9, 11.64], [6.16, 19.5], [5.5, 17.79], [20.79, 18.6], [15.44, 8.47], [21.12, 20.6], [21.8, 18.45], [4.27, 18.89], [20.13, 19.13], [3.13, 19.14], [3.46, 15.63], [5.18, 18.48], [14.03, 8.78], [7.53, 17.79], [4.51, 19.67], [6.91, 17.3], [5.76, 18.36], [20.67, 19.7], [19.0, 21.21], [15.55, 8.74], [4.53, 16.82], [5.97, 19.71], [13.95, 11.83], [15.55, 10.3], [5.48, 17.33], [16.15, 9.22], [18.49, 19.0], [20.43, 20.82], [14.73, 8.3], [20.05, 18.92], [20.47, 20.4], [6.4, 19.14], [14.12, 10.49], [19.57, 19.05], [6.32, 16.74], [14.43, 9.87], [13.68, 7.4], [14.74, 10.81], [20.09, 18.91], [6.03, 17.89], [19.55, 20.1], [16.72, 11.09], [20.03, 19.07], [16.65, 9.88], [14.87, 9.05], [4.12, 20.03], [17.32, 10.66], [18.75, 19.62], [20.68, 19.86], [5.65, 19.21], [13.98, 11.26], [15.77, 8.33], [7.52, 17.26], [3.58, 19.53], [13.94, 11.75], [19.65, 18.65], [5.54, 15.51], [16.46, 11.25], [4.8, 18.72], [14.26, 11.05], [20.41, 18.98], [18.91, 19.49], [3.81, 18.12], [20.61, 19.37], [19.99, 20.5], [20.07, 19.74], [14.05, 10.87], [15.48, 10.2], [13.79, 8.46], [19.4, 19.16], [5.58, 16.95], [15.65, 9.58], [20.89, 18.41]]
for d in data:
    x0.append(d[0])
for d in data:
    y0.append(d[1])
x=data_norm(x0)
y=data_norm(y0)
for i in range(len(data)):
    datatest.append([x[i],y[i]])


def getEuclidean(point1, point2):
    dimension = len(point1)
    dist = 0.0
    for i in range(dimension):
        dist += (point1[i] - point2[i]) ** 2
    return math.sqrt(dist)


def k_means(dataset, k, iteration):
    #初始化簇心向量
    index = random.sample(list(range(len(dataset))), k)
    vectors = []
    for i in index:
        vectors.append(dataset[i])
    #初始化标签
    labels = []
    for i in range(len(dataset)):
        labels.append(-1)
    #根据迭代次数重复k-means聚类过程
    while(iteration > 0):
        #初始化簇
        C = []
        for i in range(k):
            C.append([])
        for labelIndex, item in enumerate(dataset):
            classIndex = -1
            minDist = 1e6
            for i, point in enumerate(vectors):
                dist = getEuclidean(item, point)
                if(dist < minDist):
                    classIndex = i
                    minDist = dist
            C[classIndex].append(item)
            labels[labelIndex] = classIndex
        for i, cluster in enumerate(C):
            clusterHeart = []
            dimension = len(dataset[0])
            for j in range(dimension):
                clusterHeart.append(0)
            for item in cluster:
                for j, coordinate in enumerate(item):
                    clusterHeart[j] += coordinate / len(cluster)
            vectors[i] = clusterHeart
        iteration -= 1
    return C, labels


C, labels = k_means(datatest, 3, 20)


print(C)
